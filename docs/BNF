Data 
<object> ::=  <encapsulated-blocks> <primitives> <objects>
<object_type> ::= specific subclass of object
<type> ::= object | int | decimal | string | date | datetime | duration |  
<variable> ::= <optionally<type>> <name>
<set> ::= <collection_of_objects>
<sorted_set> ::= <collection of objects order by block, attribute, function>
    - Set for the rest of this def can be used in place of <set | sorted_set>
<string-literal> ::= '"'<text>'"' | "'"<text>"'"
<hash> ::= <string-literal | int> : <variable>

Operations
<condition> ::= (not) <value | expression_result>  [ == | != | > | >= | < | <= | and | or ] <value | expression_result>
<bitwise_operators> ::= [ &, |, ^, ~, <<, >>, >>> ]
<operators> ::= [ *, /, +, -, % ]
<operator_groupings> ::= [ (, ) ]
<max|min|avg|sum>(<values>)

Methods/Functions/Blocks
<block> ::= { <logic> }
<named_block> ::= <variable> = <block>
<function> ::= func <name> <block>
<method> ::= method <name> <block>     NOTE: methods have no return


Control Logic
<if-condition> ::= if <boolean_statement> <block>
<for-loop> ::= for <varible> in <set> <block>
<do-while-loop> ::= do <condition> 

Object Defnition
<object>.<relationship> ::= [:has_many | :has_one | :belongs_to] <object_type>
<object>.<declarative_attribute> ::=  decl <name> <block>

Object Standard Functions
<object | set>.traverse(<1-M-relationship>, <variable>, <block | function>, <conditional_filter>)
<object | set>.[sum|avg|mean](<1-M-relationship>, <variable_name>,  <attribute | block | function>, <conditional_filter>)

